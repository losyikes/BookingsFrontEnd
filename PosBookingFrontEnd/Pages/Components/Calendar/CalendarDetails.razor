@using PosBookingFrontEnd.Model
@using System.Collections.ObjectModel

<div class="calendar-details d-flex flex-column">
    <h3>CalendarDetails</h3>
    <div class="">
        <form class="details-form">
            <div class="form-group">
                <label for="customerName">CustomerName</label>
                <input type="text" class="form-control" id="customerName" @bind="customerName" />
            </div>
            <div class="form-group">
                <label for="customerPhone">CustomerPhone</label>
                <input type="text" class="form-control" id="customerPhone" @bind="customerPhone" />
            </div>
            <div class="form-group">
                <label for="type">Booking type</label>
                <select class="form-select" id="type" @bind="bookingTypeId">
                    @foreach(BookingType bookingType in BookingTypes)
                    {
                        <option value="@bookingType.Id">@bookingType.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="startTime">Startime</label>
                <input type="text" class="form-control" id="startTime" @bind="startTime" />
            </div>
            <div class="form-group">
                <label for="duration">Duration</label>
                <select class="form-select" id="duration" @bind="duration">
                    @for (TimeSpan t = new TimeSpan(0, 30, 0); t <= (NextUnavailibleTime - (SelectedBooking?.StartTime ?? SelectedTime)); t = t.Add(new TimeSpan(0, 30, 0)))
                    {
                        <option value="@t">@t</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="note">Note</label><br />
                <textarea class="form-control" id="note" @bind="note"></textarea>
            </div>
        
            <div class="form-group">
                @if(SelectedBooking == null)
                {
                    
                    <button class="btn btn-primary" type="button" onclick="@(() => insertClicked())">Insert</button>
                }
                else
                {
                    <button class="btn btn-primary" type="button" onclick="@(() => saveClicked())">Save</button>

                }
            </div>
        </form>
        @* <EditForm Model="@bookingToEdit">
            <div id="form-group">
                <label for="customerName" />
                <InputText @bind-Value="bookingToEdit.CustomerName" class="form-control" id="CustomerName" />
            </div>
            <div class="form-group">
                <label for="customerPhone">CustomerPhone</label>
                <InputText class="form-control" id="customerPhone" @bind-Value="bookingToEdit.CustomerPhone" />
            </div>
            <div class="form-group">
                <label for="type">Booking type</label>
                <InputSelect class="form-select" id="type" @bind-Value="bookingToEdit.Type.Id">
                    @foreach (BookingType bookingType in BookingTypes)
                    {
                        <option value="@bookingType.Id">@bookingType.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="startTime">Startime</label>
                <InputDate class="form-control" id="startTime" @bind-Value="bookingToEdit.StartTime"/>
            </div>
            <div class="form-group">
                <label for="duration">Duration</label>
                <InputSelect class="form-select" id="duration" @bind-Value="bookingToEdit.Duration">
                    @for (TimeSpan t = new TimeSpan(0, 30, 0); t <= (NextUnavailibleTime - (SelectedBooking?.StartTime ?? SelectedTime)); t = t.Add(new TimeSpan(0, 30, 0)))
                    {
                        <option value="@t">@t</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="note">Note</label><br />
                <InputText class="form-control" id="note" @bind-Value="bookingToEdit.Note" />
            </div>

        </EditForm> *@
    </div>
</div>
@code {
    [Parameter]
    public Booking? SelectedBooking { get; set; } = null;
    [Parameter]
    public EventCallback<Booking> SelectedBookingChanged { get; set; }
    [Parameter]
    public EventCallback<Booking> OnInsertClicked{ get; set; }
    [Parameter]
    public EventCallback<Booking> OnSaveClicked { get; set; }
    [Parameter]
    public List<BookingType> BookingTypes { get; set; } = new List<BookingType>();
    [Parameter]
    public DateTime NextUnavailibleTime { get; set; }
    [Parameter]
    public DateTime SelectedTime { get; set; }
    private Booking bookingToEdit{ get; set; } = new Booking();

    protected override void OnParametersSet()
    {
        Console.WriteLine("parameter set");
        customerName = SelectedBooking?.CustomerName ?? "";
        customerPhone = SelectedBooking?.CustomerPhone ?? "";
        bookingTypeId = SelectedBooking?.Type?.Id ?? 1;
        startTime = SelectedBooking?.StartTime ?? SelectedTime;
        duration = SelectedBooking?.EndTime - SelectedBooking?.StartTime ?? new TimeSpan(0, 30, 0);
        note = SelectedBooking?.Note ?? "";
        // StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        // Console.WriteLine("on init");
        // customerName = SelectedBooking?.CustomerName ?? "";
        // customerPhone = SelectedBooking?.CustomerPhone ?? "";
        // bookingTypeId = SelectedBooking?.Type?.Id ?? 0;
        // startTime = SelectedBooking?.StartTime ?? SelectedTime;
        // duration = SelectedBooking?.EndTime - SelectedBooking?.StartTime ?? new TimeSpan(0, 30, 0);
        // note = SelectedBooking?.Note ?? "";
    }
    private string customerName { get; set; }
    private string customerPhone { get; set; }
    private int bookingTypeId { get; set; } = 1;
    private DateTime startTime { get; set; }
    private TimeSpan duration { get; set; }
    private string note { get; set; }
    private Task saveClicked()
    {
        Booking changedBooking = new Booking()
            {
                Id = SelectedBooking.Id,
                CustomerName = customerName,
                CustomerPhone = customerPhone,
                StartTime = startTime,
                EndTime = startTime.Add(duration),
                Type = BookingTypes.FirstOrDefault(x => x.Id == bookingTypeId),
                Note = note
            };

        return OnSaveClicked.InvokeAsync(changedBooking);
    }
    private Task insertClicked()
    {
        Booking changedBooking = new Booking()
            {
                CustomerName = customerName,
                CustomerPhone = customerPhone,
                StartTime = startTime,
                EndTime = startTime.Add(duration),
                Type = BookingTypes.FirstOrDefault(x => x.Id == bookingTypeId),
                Note = note
            };
        return OnInsertClicked.InvokeAsync(changedBooking);
    }
}
