@using PosBookingFrontEnd.Model
@using System.Collections.ObjectModel


<div class="calendar-details d-flex flex-column">
    <h3>CalendarDetails</h3>
    <div>
      
        <EditForm EditContext="@editContext">
            
            <div id="form-group">
                <label for="customerName" />
                <InputText @bind-Value="bookingToEdit.CustomerName" class="form-control" id="CustomerName" />
           </div>
            <div class="form-group">
                <label for="customerPhone">CustomerPhone</label>
                <InputText class="form-control" id="customerPhone" @bind-Value="bookingToEdit.CustomerPhone" />
            </div>
            <div class="form-group">
                <label for="type">Booking type</label>
                <InputSelect class="form-select" id="type" @bind-Value="bookingToEdit.BookingTypeId">
                    @foreach (BookingType bookingType in BookingTypes)
                    {
                        <option value="@bookingType.Id">@bookingType.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="startTime">Startime</label>
                <InputText class="form-control" id="startTime" @bind-Value="bookingToEdit.StartTimeString" />
            </div> 
           <div class="form-group">
                <label for="duration">Duration</label>
                <InputSelect class="form-select" id="duration" @bind-Value="bookingToEdit.DurationString">
                    <option disabled selected value> select a duration </option>
                    @for (TimeSpan t = new TimeSpan(0, 30, 0); t <= (NextUnavailibleTime - (SelectedBooking?.StartTime ?? SelectedTime)); t = t.Add(new TimeSpan(0, 30, 0)))
                    {
                        <option value="@t.ToString("hh\\:mm")">@t</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="note">Note</label><br />
                <InputText class="form-control" id="note" @bind-Value="bookingToEdit.Note" />
            </div>
            <div class="form-group detailsButtonBar d-flex flex-row justify-content-end">
                @if (SelectedBooking == null)
                {
                    <button class="detailsBtn btn btn-primary" type="button" onclick="@(() => insertClicked())">Insert</button>
                }
                else
                {
                    <button class="detailsBtn btn btn-primary" type="button" onclick="@(() => saveClicked())">Save</button>
                    <button class="detailsBtn btn btn-danger" type="button" onclick="@(() => deleteClicked())">Delete</button>

                }
            </div>
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public Booking? SelectedBooking { get; set; } = null;
    [Parameter]
    public EventCallback<Booking> SelectedBookingChanged { get; set; }
    [Parameter]
    public EventCallback<Booking> OnInsertClicked{ get; set; }
    [Parameter]
    public EventCallback<Booking> OnSaveClicked { get; set; }
    [Parameter]
    public EventCallback<int> OnDeleteClicked { get; set; }
    [Parameter]
    public List<BookingType> BookingTypes { get; set; } = new List<BookingType>();
    [Parameter]
    public DateTime NextUnavailibleTime { get; set; }
    [Parameter]
    public DateTime SelectedTime { get; set; }
    private EditableBooking bookingToEdit { get; set; } = new EditableBooking(){Type = new BookingType(){Id= 2, Name= "HairCut"}, StartTime=DateTime.Now};
    private EditContext editContext;



    protected override void OnParametersSet()
    {
        BookingType bookingType = BookingTypes.FirstOrDefault(x => x.Id == (SelectedBooking?.Type?.Id ?? 1)) ?? new BookingType() { Id = 1, Name = "Perm" };
        bookingToEdit = new EditableBooking()
        {
            Id = SelectedBooking?.Id,
            CustomerName = SelectedBooking?.CustomerName ?? "",
            CustomerPhone = SelectedBooking?.CustomerPhone ?? "",
            Type = bookingType,
            BookingTypeId = bookingType.Id,
            StartTime = SelectedBooking?.StartTime ?? SelectedTime,
            Duration = SelectedBooking?.EndTime - SelectedBooking?.StartTime ?? new TimeSpan(0, 30, 0),
            Note = SelectedBooking?.Note ?? ""
        };

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(bookingToEdit);
    }

    private Task saveClicked()
    {
        
        Booking changedBooking = new Booking()
        {
            Id = bookingToEdit.Id,
            CustomerName = bookingToEdit.CustomerName,
            CustomerPhone = bookingToEdit.CustomerPhone,
            StartTime = bookingToEdit.StartTime,
            EndTime = bookingToEdit.StartTime.Add(bookingToEdit.Duration),
            Type = BookingTypes.First(x => x.Id == bookingToEdit.BookingTypeId),
            Note = bookingToEdit.Note
        };
        return OnSaveClicked.InvokeAsync(changedBooking);
    }

    private Task insertClicked()
    {
        
        Booking changedBooking = new Booking()
        {
            CustomerName = bookingToEdit.CustomerName,
            CustomerPhone = bookingToEdit.CustomerPhone,
            StartTime = bookingToEdit.StartTime,
            EndTime = bookingToEdit.StartTime.Add(bookingToEdit.Duration),
            Type = BookingTypes.First(x => x.Id == bookingToEdit.BookingTypeId),
            Note = bookingToEdit.Note
        };
        return OnInsertClicked.InvokeAsync(changedBooking);
    }

    private Task deleteClicked()
    {
        if(bookingToEdit.Id != null)
        {
            return OnDeleteClicked.InvokeAsync(bookingToEdit.Id.Value);
        }
        return Task.CompletedTask;
    }
}
