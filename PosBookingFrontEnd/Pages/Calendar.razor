@page "/calendar";

@using PosBookingFrontEnd.Model
@using PosBookingFrontEnd.Model.Requests
@using PosBookingFrontEnd.Pages.Components.Calendar
@using PosBookingFrontEnd.Pages.Components
@using System.Collections.ObjectModel
@using System.Text.Json
@using System.Net.Http
@using System.Text
@using PosBookingFrontEnd.Helpers

@inject SessionStorageAccessor SessionStorageAccessor
@inject HttpClient Http
@inject NavigationManager navManager;

<div class="bookings-top-bar  d-flex flex-row">
    <h3>Bookings</h3>
    <div class="buttonBar">
        <button type="button" class="btn btn-primary weekButton" @onclick="prevWeekBtnClicked">Prev Week</button>
        <button type="button" class="btn btn-primary weekButton" @onclick="nextWeekBtnClicked">Next Week</button>

    </div>
    
</div>

<div class="calendar w-100 h-100 d-flex flex-row">
    
    @for(int i = 0; i < 7; i++)
    {
        <CalendarWeekDay Date="@startOfWeek.AddDays(i)" OpeningTime="@openingHour" ClosingTime="@closingHour" OnTimeSelected="timeSelected" @bind-CurrentBookings="@currentBookings" />
    }
    <CalendarDetails @bind-SelectedBooking=@selectedBooking BookingTypes="@bookingTypes" NextUnavailibleTime="@nextUnavailibleTime" SelectedTime="@selectedTime" OnInsertClicked="insertClicked" OnSaveClicked="saveClicked" OnDeleteClicked="deleteClicked" />
    <ErrorModal @ref="@modal" Title="@errorModalTitle" ErrorText="@errorModalMessage"/>
</div>

@code {
    private TimeOnly openingHour = new TimeOnly(08, 00);
    private TimeOnly closingHour = new TimeOnly(17, 00);
    private List<DateTime> weekDaysDates = new List<DateTime>();
    private DateTime startOfWeek;
    private DateTime selectedTime { get; set; } = DateTime.Now;
    private Booking? selectedBooking { get; set; } = null;
    private DateTime nextUnavailibleTime;
    private List<Booking> currentBookings { get; set; } = new List<Booking>();
    private List<BookingType> bookingTypes { get; set; } = new List<BookingType>();
    private DateTime currentDate { get; set; } = DateTime.Today;
    private string errorModalTitle { get; set; } = "Error";
    private string errorModalMessage { get; set; } = "";
    private bool showErrorModal { get; set; } = false;
    private ErrorModal modal { get; set; }
    protected override async Task OnInitializedAsync()
    {
        string? sessionDate = await SessionStorageAccessor.GetValueAsync<string>("currentDate");
        if(sessionDate != null)
        {
            currentDate = JsonSerializer.Deserialize<DateTime>(sessionDate);
        }
        startOfWeek = currentDate.AddDays(DayOfWeek.Monday - DateTime.Now.DayOfWeek);
        DateTime endOfWeek = startOfWeek.AddDays(7);
        nextUnavailibleTime = currentDate.Add(closingHour.ToTimeSpan());

        currentBookings = await GetBookings(startOfWeek, endOfWeek);
        bookingTypes = await GetBookingTypes();
        List<Booking> nextBookings = currentBookings.Where(x => x.StartTime.Date == DateTime.Now.Date && x.StartTime > DateTime.Now).OrderBy(x => x.StartTime).ToList();
        if (nextBookings.Count > 0)
        {
            nextUnavailibleTime = nextBookings.First().StartTime;
        }

    }
    private async void nextWeekBtnClicked()
    {
        currentDate = currentDate.AddDays(7);
        string jsonDate = JsonSerializer.Serialize(currentDate);
        await SessionStorageAccessor.SetValueAsync("currentDate", jsonDate);
        //StateHasChanged();
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }
    private async void prevWeekBtnClicked()
    {
        currentDate = currentDate.AddDays(-7);
        string jsonDate = JsonSerializer.Serialize(currentDate);
        await SessionStorageAccessor.SetValueAsync("currentDate", jsonDate);
        navManager.NavigateTo(navManager.Uri, forceLoad: true);

        //StateHasChanged();
    }
    private async void insertClicked(Booking booking)
    {
        await InsertBooking(booking);
    }
    private async void saveClicked(Booking booking)
    {
        await SaveBooking(booking);
    }
    private async void deleteClicked(int id)
    {
        await DeleteBooking(id);
    }

    private void timeSelected(DateTime selectionDate)
    {
        errorModalMessage = "test Message";
        
        if(selectionDate >= DateTime.MinValue)
            selectedTime = selectionDate;
        if (currentBookings.Any(x => x.StartTime <= selectedTime && x.EndTime > selectedTime))
        {
            selectedBooking = currentBookings.SingleOrDefault(x => x.StartTime <= selectedTime && x.EndTime > selectedTime);
        }
        else
        {
            selectedBooking = null;
        }

        List<Booking> nextBookings = currentBookings.Where(x => x.StartTime.Date == selectedTime.Date && x.StartTime > selectedTime).OrderBy(x => x.StartTime).ToList();
        if (nextBookings.Count > 0)
        {
            nextUnavailibleTime = nextBookings.First().StartTime;
        }
        else
        {
            nextUnavailibleTime = selectedTime.Date.Add(closingHour.ToTimeSpan());
        }
        Console.WriteLine(nextUnavailibleTime);
    }
    async Task<List<Booking>?> GetBookings(DateTime startTime, DateTime endTime)
    {
        string uri = string.Format("api/Booking?StartTime={0}&EndTime={1}", startTime.ToUniversalTime().ToString(), endTime.ToUniversalTime().ToString());
        List<Booking>? result = await Http.GetFromJsonAsync<List<Booking>>(uri);

        return result ?? new List<Booking>();
    }
    async Task<List<BookingType>?> GetBookingTypes()
    {
        List<BookingType>? result = await Http.GetFromJsonAsync<List<BookingType>>("api/BookingType");
        return result ?? new List<BookingType>();
    }
    async Task InsertBooking(Booking booking)
    {
        PostBookingRequest data = new PostBookingRequest()
            {
                TypeId = booking.Type.Id,
                CustomerName = booking.CustomerName,
                CustomerPhone = booking.CustomerPhone,
                EndTime = booking.EndTime,
                StartTime = booking.StartTime,
                Note = booking.Note
            };
        string uri = "/api/booking";
        string json = JsonSerializer.Serialize(data);
        StringContent stringContent = new StringContent(json, Encoding.UTF8, "application/json");
        HttpResponseMessage result = await Http.PostAsync(uri, stringContent);
        if (result.IsSuccessStatusCode)
        {
            DateTime endOfWeek = startOfWeek.AddDays(7);

            currentBookings = await GetBookings(startOfWeek, endOfWeek);
            StateHasChanged();
        }
        else
        {
            errorModalMessage = result?.ReasonPhrase ?? "Error inserting Booking";
            modal.Open();
        }

    }
    async Task SaveBooking(Booking booking)
    {
        if(booking.Id != null)
        {
            UpdateBookingRequest data = new UpdateBookingRequest()
                {
                    Id = booking.Id.Value,
                    CustomerName = booking.CustomerName,
                    CustomerPhone = booking.CustomerPhone,
                    StartTime = booking.StartTime,
                    EndTime = booking.EndTime,
                    TypeId = booking.Type.Id,
                    Note = booking.Note
                };
            string uri = "/api/booking";
            string json = JsonSerializer.Serialize<UpdateBookingRequest>(data);
            StringContent stringContent = new StringContent(json, Encoding.UTF8, "application/json");
            HttpResponseMessage result = await Http.PutAsync(uri, stringContent);
            string resultContent = await result.Content.ReadAsStringAsync();
            if (result.IsSuccessStatusCode)
            {
                DateTime endOfWeek = startOfWeek.AddDays(7);

                currentBookings = await GetBookings(startOfWeek, endOfWeek);
                selectedBooking = currentBookings.FirstOrDefault(x => x.Id == booking.Id);
                StateHasChanged();
            }
            else
            {
                errorModalMessage = result?.ReasonPhrase ?? "Error saving Booking";
                modal.Open();
            }

        }


    }
    async Task DeleteBooking(int id)
    {
        string uri = string.Format("/api/booking?Id={0}", id);

        HttpResponseMessage result = await Http.DeleteAsync(uri);
        DateTime endOfWeek = startOfWeek.AddDays(7);
        if (result.IsSuccessStatusCode)
        {
            currentBookings = await GetBookings(startOfWeek, endOfWeek);
            selectedBooking = null;
            StateHasChanged();
        }
        else
        {
            errorModalMessage = result?.ReasonPhrase ?? "Error deleting Booking";
            modal.Open();
        }

    }
}
